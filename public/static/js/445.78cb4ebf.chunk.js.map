{"version":3,"file":"static/js/445.78cb4ebf.chunk.js","mappings":"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","sources":["RammerheadAPI.js","pages/compat/Rammerhead.js"],"sourcesContent":["export class RammerheadAPI {\n\tconstructor(server, signal) {\n\t\tthis.server = server;\n\t\tthis.signal = signal;\n\t}\n\tasync get(url) {\n\t\tif (this.password) {\n\t\t\t// really cheap way of adding a query parameter\n\t\t\tif (url.includes('?')) {\n\t\t\t\turl += '&pwd=' + this.password;\n\t\t\t} else {\n\t\t\t\turl += '?pwd=' + this.password;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst request = await fetch(new URL(url, this.server), {\n\t\t\t\tsignal: this.signal,\n\t\t\t});\n\n\t\t\tif (request.status === 200) {\n\t\t\t\treturn await request.text();\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`unexpected server response to not match \"200\". Server says \"${await request.text()}\"`\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tthrow new Error('Cannot communicate with the server');\n\t\t}\n\t}\n\tasync needpassword() {\n\t\tconst value = await this.get('needpassword');\n\n\t\treturn value === 'true';\n\t}\n\tasync newsession() {\n\t\treturn await this.get('newsession');\n\t}\n\tasync editsession(id, httpProxy, enableShuffling) {\n\t\tconst res = await this.get(\n\t\t\t'editsession?id=' +\n\t\t\t\tencodeURIComponent(id) +\n\t\t\t\t(httpProxy ? '&httpProxy=' + encodeURIComponent(httpProxy) : '') +\n\t\t\t\t'&enableShuffling=' +\n\t\t\t\t(enableShuffling ? '1' : '0')\n\t\t);\n\n\t\tif (res !== 'Success') {\n\t\t\tthrow new Error(`unexpected response from server. received ${res}`);\n\t\t}\n\t}\n\tasync sessionexists(id) {\n\t\tconst res = await this.get('sessionexists?id=' + encodeURIComponent(id));\n\n\t\tswitch (res) {\n\t\t\tcase 'exists':\n\t\t\t\treturn true;\n\t\t\tcase 'not found':\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`unexpected response from server. received ${res}`);\n\t\t}\n\t}\n\tasync deletesession(id) {\n\t\tif (await this.sessionexists(id)) {\n\t\t\tconst res = await this.get('deletesession?id=' + id);\n\n\t\t\tif (res !== 'Success' && res !== 'not found') {\n\t\t\t\tthrow new Error(`unexpected response from server. received ${res}`);\n\t\t\t}\n\t\t}\n\t}\n\tasync shuffleDict(id) {\n\t\tconst res = await this.get('api/shuffleDict?id=' + encodeURIComponent(id));\n\t\treturn JSON.parse(res);\n\t}\n}\n\nexport class StrShuffler {\n\tmod(n, m) {\n\t\treturn ((n % m) + m) % m;\n\t}\n\tbaseDictionary =\n\t\t'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~-';\n\tshuffledIndicator = '_rhs';\n\tgenerateDictionary() {\n\t\tlet str = '';\n\t\tconst split = this.baseDictionary.split('');\n\t\twhile (split.length > 0) {\n\t\t\tstr += split.splice(Math.floor(Math.random() * split.length), 1)[0];\n\t\t}\n\t\treturn str;\n\t}\n\tconstructor(dictionary = this.generateDictionary()) {\n\t\tthis.dictionary = dictionary;\n\t}\n\tshuffle(str) {\n\t\tstr = str.toString();\n\t\tif (str.startsWith(this.shuffledIndicator)) {\n\t\t\treturn str;\n\t\t}\n\t\tlet shuffledStr = '';\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tconst char = str.charAt(i);\n\t\t\tconst idx = this.baseDictionary.indexOf(char);\n\t\t\tif (char === '%' && str.length - i >= 3) {\n\t\t\t\tshuffledStr += char;\n\t\t\t\tshuffledStr += str.charAt(++i);\n\t\t\t\tshuffledStr += str.charAt(++i);\n\t\t\t} else if (idx === -1) {\n\t\t\t\tshuffledStr += char;\n\t\t\t} else {\n\t\t\t\tshuffledStr += this.dictionary.charAt(\n\t\t\t\t\tthis.mod(idx + i, this.baseDictionary.length)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn this.shuffledIndicator + shuffledStr;\n\t}\n\tunshuffle(str) {\n\t\tif (!str.startsWith(this.shuffledIndicator)) {\n\t\t\treturn str;\n\t\t}\n\n\t\tstr = str.slice(this.shuffledIndicator.length);\n\n\t\tlet unshuffledStr = '';\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tconst char = str.charAt(i);\n\t\t\tconst idx = this.dictionary.indexOf(char);\n\t\t\tif (char === '%' && str.length - i >= 3) {\n\t\t\t\tunshuffledStr += char;\n\t\t\t\tunshuffledStr += str.charAt(++i);\n\t\t\t\tunshuffledStr += str.charAt(++i);\n\t\t\t} else if (idx === -1) {\n\t\t\t\tunshuffledStr += char;\n\t\t\t} else {\n\t\t\t\tunshuffledStr += this.baseDictionary.charAt(\n\t\t\t\t\tthis.mod(idx - i, this.baseDictionary.length)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn unshuffledStr;\n\t}\n}\n","import { useEffect } from 'react';\nimport { Obfuscated } from '../../obfuscate.js';\nimport { RammerheadAPI, StrShuffler } from '../../RammerheadAPI.js';\nimport { RH_APP } from '../../root.js';\n\nexport default function Rammerhead(props) {\n\tuseEffect(() => {\n\t\tvoid (async function () {\n\t\t\tlet error_cause;\n\n\t\t\ttry {\n\t\t\t\tconst api = new RammerheadAPI(RH_APP);\n\n\t\t\t\terror_cause = 'Rammerhead server is unreachable.';\n\t\t\t\tawait fetch(RH_APP);\n\t\t\t\terror_cause = undefined;\n\n\t\t\t\terror_cause = 'Unable to check if the saved session exists.';\n\t\t\t\tif (\n\t\t\t\t\t!localStorage.rammerhead_session ||\n\t\t\t\t\t!(await api.sessionexists(localStorage.rammerhead_session))\n\t\t\t\t) {\n\t\t\t\t\terror_cause = 'Unable to create a new Rammerhead session.';\n\t\t\t\t\tconst session = await api.newsession();\n\t\t\t\t\terror_cause = undefined;\n\t\t\t\t\tlocalStorage.rammerhead_session = session;\n\t\t\t\t}\n\n\t\t\t\tconst session = localStorage.rammerhead_session;\n\n\t\t\t\terror_cause = undefined;\n\n\t\t\t\terror_cause = 'Unable to edit a Rammerhead session.';\n\t\t\t\tawait api.editsession(session, false, true);\n\t\t\t\terror_cause = undefined;\n\n\t\t\t\terror_cause = 'Unable to retrieve shuffled dictionary.';\n\t\t\t\tconst dict = await api.shuffleDict(session);\n\t\t\t\terror_cause = undefined;\n\n\t\t\t\tconst shuffler = new StrShuffler(dict);\n\n\t\t\t\tglobal.location.assign(\n\t\t\t\t\tnew URL(\n\t\t\t\t\t\t`${session}/${shuffler.shuffle(\n\t\t\t\t\t\t\tprops.compat_layout.current.destination\n\t\t\t\t\t\t)}`,\n\t\t\t\t\t\tRH_APP\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tprops.compat_layout.current.report(error, error_cause, 'Rammerhead');\n\t\t\t}\n\t\t})();\n\t}, [props.compat_layout]);\n\n\treturn (\n\t\t<main className=\"compat\">\n\t\t\tLoading <Obfuscated>Rammerhead</Obfuscated>...\n\t\t</main>\n\t);\n}\n"],"names":["RammerheadAPI","server","signal","this","url","password","includes","fetch","URL","request","status","text","Error","console","error","get","value","id","httpProxy","enableShuffling","encodeURIComponent","res","sessionexists","JSON","parse","StrShuffler","dictionary","generateDictionary","baseDictionary","shuffledIndicator","n","m","str","split","length","splice","Math","floor","random","toString","startsWith","shuffledStr","i","char","charAt","idx","indexOf","mod","slice","unshuffledStr","Rammerhead","props","useEffect","api","RH_APP","error_cause","undefined","localStorage","rammerhead_session","newsession","session","editsession","shuffleDict","dict","shuffler","global","location","assign","shuffle","compat_layout","current","destination","report","className"],"sourceRoot":""}